// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Recipe {
    id           String   @id @default(cuid())
    image        String
    name         String   
    ingredients  Json
    steps        Json
    timeRequired Int
    notes        String?
    author       User     @relation(fields: [authorId], references: [id], name: "author")
    authorId     String
    savedBy      User[]   @relation(name: "saves")
    tags         Tag[]
    rating       Int
    createdAt    DateTime @default(now())
}

model Tag {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    name      String   @unique
    recipes   Recipe[]
}

model User {
    id           String    @id @default(cuid())
    email        String    @unique
    name         String?
    image        String?
    createdAt    DateTime  @default(now())
    recipes      Recipe[]  @relation(name: "author")
    savedRecipes Recipe[]  @relation(name: "saves")
    accounts     Account[]
    sessions     Session[]
    emailVerified DateTime?
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
