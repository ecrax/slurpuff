import type { NextPage } from "next";
import type { Session } from "next-auth";
import { useAtom } from "jotai";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect } from "react";
import LoadingSpinner from "../../components/LoadingSpinner";
import RecipeCard from "../../components/RecipeCard";
import { savedRecipesAtom } from "../../utils/atoms";
import { trpc } from "../../utils/trpc";

const UserPage: NextPage = () => {
  const { query } = useRouter();
  const { id } = query;
  const { data: session, status } = useSession();

  if (!id || typeof id !== "string") return <div>No id</div>;

  if (status === "loading") return <LoadingSpinner />;

  if (session) return <UserPageContentLoggedIn id={id} session={session} />;
  else return <UserPageContentAnon id={id} />;
};

const UserPageContentAnon: React.FC<{ id: string }> = ({ id }) => {
  const {
    data: user,
    isLoading,
    error,
  } = trpc.useQuery(["user.getUserDataById", { id: id }]);

  const {
    data: recipePages,
    isLoading: isRecipePagesLoading,
    fetchNextPage,
    isFetchingNextPage,
    hasNextPage,
  } = trpc.useInfiniteQuery(["user.getAllUserRecipes", { id: id }], {
    getNextPageParam: (lastPage) => lastPage.at(8)?.id,
  });

  const router = useRouter();

  useEffect(() => {
    if (error?.data?.httpStatus === 404 || (!isLoading && !user)) {
      router.push("/404");
    }
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container h-screen px-8 mx-auto">
        {!isLoading && !isRecipePagesLoading && recipePages && user ? (
          <>
            <main className="flex flex-col items-center justify-center pb-16">
              <div>
                <img
                  src={user.image ?? ""}
                  alt={user.name ?? "Avatar of user"}
                  className="rounded-full"
                />
              </div>
              <div>
                <h1 className="py-8 mb-2 text-4xl font-bold">{user.name}</h1>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-7">
                {recipePages.pages.map((recipes) =>
                  recipes.map((recipe) => {
                    return <RecipeCard recipe={recipe} key={recipe.id} />;
                  })
                )}
              </div>
              <div className="mb-8 px-8 py-4 my-16">
                {isFetchingNextPage ? (
                  <LoadingSpinner height="mb-8 h-full" />
                ) : hasNextPage ? (
                  <button
                    onClick={() => fetchNextPage()}
                    disabled={!hasNextPage || isFetchingNextPage}
                    className="mb-8 px-8 py-4 bg-base-200 rounded-xl"
                  >
                    Load More
                  </button>
                ) : (
                  ""
                )}
              </div>
            </main>
          </>
        ) : (
          <LoadingSpinner />
        )}
      </div>
    </>
  );
};

const UserPageContentLoggedIn: React.FC<{ id: string; session: Session }> = ({
  id,
  session,
}) => {
  const {
    data: user,
    isLoading,
    error,
  } = trpc.useQuery(["user.getUserDataById", { id: id }]);

  const { data: currentUser, isLoading: idCurrentUserLoading } = trpc.useQuery([
    "user.getCurrentUser",
  ]);

  const {
    data: recipePages,
    isLoading: isRecipePagesLoading,
    fetchNextPage,
    isFetchingNextPage,
    hasNextPage,
  } = trpc.useInfiniteQuery(["user.getAllUserRecipes", { id: id }], {
    getNextPageParam: (lastPage) => lastPage.at(8)?.id,
  });
  const [x, setX] = useAtom(savedRecipesAtom);

  useEffect(() => {
    if (!x && currentUser?.savedRecipes)
      setX(currentUser.savedRecipes.map((v) => v.id));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentUser?.savedRecipes]);

  const router = useRouter();

  useEffect(() => {
    if (error?.data?.httpStatus === 404 || (!isLoading && !user)) {
      router.push("/404");
    }
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container h-screen px-8 mx-auto">
        {!isLoading &&
        !isRecipePagesLoading &&
        !idCurrentUserLoading &&
        x &&
        recipePages &&
        user ? (
          <>
            <main className="flex flex-col items-center justify-center pb-16">
              <div>
                <img
                  src={user.image ?? ""}
                  alt={user.name ?? "Avatar of user"}
                  className="rounded-full"
                />
              </div>
              <div>
                <h1 className="py-8 mb-2 text-4xl font-bold">{user.name}</h1>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-7">
                {recipePages.pages.map((recipes) =>
                  recipes.map((recipe) => {
                    return (
                      <RecipeCard
                        session={session}
                        recipe={recipe}
                        key={recipe.id}
                      />
                    );
                  })
                )}
              </div>
              <div className="mb-8 px-8 py-4 my-16">
                {isFetchingNextPage ? (
                  <LoadingSpinner height="mb-8 h-full" />
                ) : hasNextPage ? (
                  <button
                    onClick={() => fetchNextPage()}
                    disabled={!hasNextPage || isFetchingNextPage}
                    className="mb-8 px-8 py-4 bg-base-200 rounded-xl"
                  >
                    Load More
                  </button>
                ) : (
                  ""
                )}
              </div>
            </main>
          </>
        ) : (
          <LoadingSpinner />
        )}
      </div>
    </>
  );
};

export default UserPage;
