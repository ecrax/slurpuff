import type { NextPage } from "next";
import type { Session } from "next-auth";
import { useSession } from "next-auth/react";
import dynamic from "next/dynamic";
import Head from "next/head";
import { Suspense, useEffect, useState } from "react";
import RecipeCard from "../../components/RecipeCard";
import { savedRecipesAtom } from "../../utils/atoms";
import { trpc } from "../../utils/trpc";
import { useAtom } from "jotai";
import LoadingSpinner from "../../components/LoadingSpinner";

const MePage: NextPage = () => {
  const { data: session, status } = useSession();

  if (status === "loading") return <LoadingSpinner />;

  if (!session) return <div>You have to be logged in to view this page</div>;

  return <MePageContent session={session} />;
};

const MePageContent: React.FC<{ session: Session }> = ({ session }) => {
  const [x, setX] = useAtom(savedRecipesAtom);
  const { data: user, isLoading } = trpc.useQuery(["user.getCurrentUser"]);

  const {
    data: recipePages,
    isLoading: isRecipePagesLoading,
    fetchNextPage,
    isFetchingNextPage,
    hasNextPage,
  } = trpc.useInfiniteQuery(
    ["user.getAllUserRecipes", { id: session.user!.id! }],
    {
      getNextPageParam: (lastPage) => lastPage.at(8)?.id,
    }
  );

  const [currentTab, setCurrentTab] = useState<"all" | "saved">("all");

  useEffect(() => {
    if (!x && user?.savedRecipes) setX(user.savedRecipes.map((v) => v.id));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user?.savedRecipes]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container h-screen px-8 mx-auto">
        {!isLoading && x && !isRecipePagesLoading && recipePages && user ? (
          <>
            <main className="flex flex-col items-center justify-center pb-16">
              <div>
                {/* eslint-disable-next-line @next/next/no-img-element */}
                <img
                  src={user.image ?? ""}
                  alt={user.name ?? "Avatar of user"}
                  className="rounded-full"
                />
              </div>
              <div>
                <h1 className="py-8 mb-2 text-4xl font-bold">{user.name}</h1>
              </div>
              <div className="pb-4 tabs">
                <a
                  className={`tab tab-bordered ${
                    currentTab === "all" ? "tab-active" : ""
                  }`}
                  onClick={() => setCurrentTab("all")}
                >
                  All
                </a>
                <a
                  className={`tab tab-bordered ${
                    currentTab === "saved" ? "tab-active" : ""
                  }`}
                  onClick={() => setCurrentTab("saved")}
                >
                  Saved
                </a>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-7">
                {currentTab === "all" ? (
                  recipePages.pages.map((recipes) =>
                    recipes.map((recipe) => {
                      return (
                        <RecipeCard
                          session={session}
                          recipe={recipe}
                          key={recipe.id}
                        />
                      );
                    })
                  )
                ) : (
                  <Suspense fallback={<LoadingSpinner height="h-full" />}>
                    {recipePages.pages.map((recipes, i) => {
                      if (i === recipePages.pages.length)
                        return <div>No Recipes Saved Yet</div>;
                      return (
                        <DynamicSavedRecipes
                          user={user}
                          session={session}
                          recipes={recipes}
                          key={"savedPage" + i}
                        />
                      );
                    })}
                  </Suspense>
                )}
              </div>
              <div className="mb-8 px-8 py-4 my-16">
                {isFetchingNextPage ? (
                  <LoadingSpinner height="mb-8 h-full" />
                ) : hasNextPage ? (
                  <button
                    onClick={() => fetchNextPage()}
                    disabled={!hasNextPage || isFetchingNextPage}
                    className="mb-8 px-8 py-4 bg-base-200 rounded-xl"
                  >
                    Load More
                  </button>
                ) : (
                  ""
                )}
              </div>
            </main>
          </>
        ) : (
          <LoadingSpinner />
        )}
      </div>
    </>
  );
};

export default MePage;

const DynamicSavedRecipes = dynamic(
  () => import("../../components/SavedRecipes"),
  { suspense: true, ssr: true }
);
