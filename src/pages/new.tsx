import DynamicInput from "./../components/DynamicInput";
import type { NextPage } from "next";
import { signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import { trpc } from "../utils/trpc";
import { toMiliseconds } from "../utils/time";

const New: NextPage = () => {
  const { data: session, status } = useSession();

  const {
    isLoading: createIsLoading,
    error: createError,
    mutate: createRecipe,
  } = trpc.useMutation(["recipe.create"]);

  const [ingredients, setIngredients] = useState([""]);
  const [steps, setSteps] = useState([""]);
  const [tags, setTags] = useState([""]);
  const [name, setName] = useState("");
  const [image, setImage] = useState<File>();
  const [duration, setDuration] = useState({ minutes: 0, hours: 0 });

  const uploadImage = async (image: File) => {
    const data = new FormData();
    data.append("file", image);
    data.append("upload_preset", "slurpuff");
    data.append("cloud_name", "slurpuff");
    const res = await fetch(
      "https://api.cloudinary.com/v1_1/ecrax/image/upload",
      {
        method: "post",
        body: data,
      }
    );
    const resData = await res.json();
    return resData.url;
  };
  const handleCreate = async () => {
    //console.log(name);
    //console.log("ingredients?", ingredients);
    //console.log("steps?", steps);
    //console.log("tags?", tags);

    if (!session?.user?.id) return;
    if (!image) return;
    if (!duration) return;
    if (!name) return;

    const uploadedImageUrl = await uploadImage(image);
    //console.log(uploadedImageUrl);

    //console.log(duration);
    const durationMs = toMiliseconds(
      duration.hours === NaN ? 0 : duration.hours,
      duration.minutes === NaN ? 0 : duration.minutes,
      0
    );

    //console.log(durationMs);

    createRecipe(
      {
        authorId: session?.user?.id,
        name: name,
        ingredients: ingredients,
        steps: steps,
        tags: tags,
        image: uploadedImageUrl,
        timeRequired: durationMs,
      },
      {
        onSuccess(data, variables, context) {
          console.log("creation successfull");
        },
      }
    );
  };

  if (status === "loading") {
    return <p>Loading</p>;
  } else if (!session) {
    console.log("test");
    return <p>Please Sign in</p>;
  } else {
    return (
      <>
        <Head>
          <title>Create T3 App</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div className="container h-screen p-8 mx-auto">
          {session && (
            <>
              <nav className="flex flex-row justify-between">
                <p>Signed in as {session.user?.email}</p>
                <button
                  onClick={() => {
                    signOut();
                  }}
                >
                  Sign out
                </button>
              </nav>
              <main className="flex flex-col items-center justify-center">
                <form
                  className="flex flex-col"
                  onSubmit={(e) => {
                    e.preventDefault();
                  }}
                >
                  <label>
                    Name
                    <input
                      type="text"
                      onChange={(e) => setName(e.target.value)}
                    />
                  </label>
                  <label>
                    Image
                    <input
                      onChange={(e) => {
                        //not nice but i dont know ts
                        setImage(e.target.files![0]);
                      }}
                      accept=".jpg, .png, .jpeg"
                      className="mb-2 fileInput"
                      type="file"
                    ></input>
                  </label>
                  <label>
                    Time required
                    <input
                      type="number"
                      placeholder="Hours"
                      min={0}
                      step="1"
                      onChange={(e) => {
                        const num = Number.parseInt(e.target.value);
                        if (num < 0) e.target.value = "0";
                        if (!Number.isInteger(num))
                          e.target.value = Math.round(num).toString();

                        const _duration = duration;
                        _duration.hours = num;
                        setDuration(_duration);
                        console.log(duration);
                      }}
                    />
                    <input
                      type="number"
                      placeholder="Minutes"
                      max={59}
                      min={0}
                      step="1"
                      onChange={(e) => {
                        const num = Number.parseInt(e.target.value);
                        if (num > 59) e.target.value = "59";
                        if (!Number.isInteger(num))
                          e.target.value = Math.round(num).toString();

                        const _duration = duration;
                        _duration.minutes = num;
                        setDuration(_duration);
                        console.log(duration);
                      }}
                    />
                  </label>
                  <DynamicInput
                    setState={setIngredients}
                    state={ingredients}
                    name={"Ingredients"}
                  />
                  <DynamicInput
                    setState={setSteps}
                    state={steps}
                    name={"Steps"}
                  />
                  <DynamicInput setState={setTags} state={tags} name={"Tags"} />
                  <button disabled={createIsLoading} onClick={handleCreate}>
                    Create
                  </button>
                  <p>{createError?.message ? createError.message : ""}</p>
                </form>
              </main>
            </>
          )}
        </div>
      </>
    );
  }
};

export default New;
