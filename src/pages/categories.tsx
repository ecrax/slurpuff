import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { trpc } from "../utils/trpc";
import LoadingSpinner from "../components/LoadingSpinner";

const CategoriesPage: NextPage = () => {
  const {
    data: tagPages,
    fetchNextPage,
    isFetchingNextPage,
    hasNextPage,
  } = trpc.useInfiniteQuery(["tags.getAllTags", {}], {
    getNextPageParam: (lastPage) => lastPage.at(9)?.id,
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container h-screen px-8 mx-auto">
        <h1 className="text-4xl font-extrabold">Categories</h1>
        <div className="pt-6">
          <div className="flex gap-4 items-center flex-wrap">
            {tagPages ? (
              tagPages.pages.map((tags) =>
                tags.map((tag) => {
                  return (
                    <p className="capitalize btn btn-outline" key={tag.id}>
                      <Link href={"/tag/" + tag.name}>{tag.name}</Link>
                    </p>
                  );
                })
              )
            ) : (
              <LoadingSpinner />
            )}
            {isFetchingNextPage ? (
              <LoadingSpinner height="h-12" />
            ) : hasNextPage ? (
              <button
                onClick={() => fetchNextPage()}
                disabled={!hasNextPage || isFetchingNextPage}
                className="btn btn-ghost px-8 py-4 bg-base-200 rounded-xl"
              >
                Load More
              </button>
            ) : (
              ""
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default CategoriesPage;
