import type { NextPage } from "next";
import { signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { trpc } from "../../utils/trpc";

const RecipePage: NextPage = () => {
  const { query } = useRouter();
  const { id } = query;

  if (!id || typeof id !== "string") return <div>No id</div>;

  const _id = Number.parseInt(id);
  if (Number.isNaN(_id)) return <p>Please pass a number</p>;

  return <RecipePageContent id={_id} />;
};

const RecipePageContent: React.FC<{ id: number }> = ({ id }) => {
  const { data: session, status } = useSession();
  const { data: recipe, isLoading } = trpc.useQuery([
    "recipe.getById",
    { id: id },
  ]);

  if (status === "loading") return <p>Loading</p>;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container h-screen p-8 mx-auto">
        {session ? (
          <nav className="flex flex-row justify-between">
            <p>Signed in as {session.user?.email}</p>
            <button
              onClick={() => {
                signOut();
              }}
            >
              Sign out
            </button>
          </nav>
        ) : (
          <nav className="flex flex-row justify-between">
            <div>You are not logged in</div>
          </nav>
        )}
        <main className="flex flex-col items-center justify-center">
          {!isLoading ? (
            <div>
              <Image
                src={recipe?.image ?? ""}
                width={300}
                height={200}
                alt={recipe?.name}
                objectFit="contain"
              />
              <div>{recipe?.name}</div>
              <div>
                {recipe?.tags.map((t) => (
                  <div key={t}>{t}</div>
                ))}
              </div>
              <div>
                <p>Ingredients</p>
                {recipe?.ingredients.map((ingr) => (
                  <div key={ingr}>{ingr}</div>
                ))}
              </div>
              <div>
                <p>Steps</p>
                {recipe?.steps.map((s, i) => (
                  <div key={s}>
                    {i + 1}.{" " + s}
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <p>Loading...</p>
          )}
        </main>
      </div>
    </>
  );
};

export default RecipePage;
